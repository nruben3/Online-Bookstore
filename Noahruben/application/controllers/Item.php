<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Item extends Admin_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Item_model');
    } 

    /*
     * Listing of items
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('item/index?');
        $config['total_rows'] = $this->Item_model->get_all_items_count();
        $this->pagination->initialize($config);

        $data['items'] = $this->Item_model->get_all_items($params);
        
        $data['_view'] = 'item/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new item
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('cat_id','Cat Id','required');
		$this->form_validation->set_rules('name','Name','required');
		$this->form_validation->set_rules('saleprice','Saleprice','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'cat_id' => $this->input->post('cat_id'),
				'name' => $this->input->post('name'),
				'saleprice' => $this->input->post('saleprice'),
				'description' => $this->input->post('description')
            );
            
            $item_id = $this->Item_model->add_item($params);
            redirect('item/index');
        }
        else
        {
			$this->load->model('Itemcat_model');
			$data['all_itemcat'] = $this->Itemcat_model->get_all_itemcat();
            
            $data['_view'] = 'item/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a item
     */
    function edit($id)
    {   
        // check if the item exists before trying to edit it
        $data['item'] = $this->Item_model->get_item($id);
        
        if(isset($data['item']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('cat_id','Cat Id','required');
			$this->form_validation->set_rules('name','Name','required');
			$this->form_validation->set_rules('saleprice','Saleprice','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'cat_id' => $this->input->post('cat_id'),
					'name' => $this->input->post('name'),
					'saleprice' => $this->input->post('saleprice'),
					'description' => $this->input->post('description')
                );

                $this->Item_model->update_item($id,$params);            
                redirect('item/index');
            }
            else
            {
				$this->load->model('Itemcat_model');
				$data['all_itemcat'] = $this->Itemcat_model->get_all_itemcat();

                $data['_view'] = 'item/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The item you are trying to edit does not exist.');
    } 

    /*
     * Deleting item
     */
    function remove($id)
    {
        $item = $this->Item_model->get_item($id);

        // check if the item exists before trying to delete it
        if(isset($item['id']))
        {
            $this->Item_model->delete_item($id);
            redirect('item/index');
        }
        else
            show_error('The item you are trying to delete does not exist.');
    }
    /*
     * Count item Stock
     */
    function Stock()
    {
        $data['stock'] = $this->Item_model->get_stock();
        $data['usedproducts'] = $this->Item_model->get_usedProducts();
        
        $data['_view'] = 'item/stock';
        $this->load->view('layouts/main',$data);
    }
    
}
